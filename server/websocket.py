from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Query
from server.database import get_connection
from server.routes.auth import verify_token
import json
from datetime import datetime
import logging
import sqlite3

router = APIRouter()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ConnectionManager:
    def __init__(self):
        self.active_chats = {}  # { chat_id: [websockets] }

    async def connect(self, chat_id: int, websocket: WebSocket):
        await websocket.accept()
        if chat_id not in self.active_chats:
            self.active_chats[chat_id] = []
        self.active_chats[chat_id].append(websocket)

    def disconnect(self, chat_id: int, websocket: WebSocket):
        if chat_id in self.active_chats:
            self.active_chats[chat_id].remove(websocket)
            if not self.active_chats[chat_id]:  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —É–¥–∞–ª—è–µ–º —á–∞—Ç
                del self.active_chats[chat_id]

    async def broadcast(self, chat_id: int, message: dict):
        if chat_id in self.active_chats:
            for websocket in self.active_chats[chat_id]:
                await websocket.send_text(json.dumps(message))

manager = ConnectionManager()

@router.websocket("/ws/chat/{chat_id}")
async def websocket_endpoint(websocket: WebSocket, chat_id: int, token: str = Query(...)):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    user = verify_token(token)
    if not user:
        await websocket.send_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
        await websocket.close(code=1008)  # Policy Violation
        return

    username = user["username"]
    user_id = user["id"]

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = get_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
    cursor.execute("SELECT * FROM participants WHERE chat_id = ? AND user_id = ?", (chat_id, user_id))
    if not cursor.fetchone():
        await websocket.send_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
        await websocket.close(code=1008)
        conn.close()
        return

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
    await manager.connect(chat_id, websocket)
    logger.info(f"üîó WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω –¥–ª—è {username} –≤ —á–∞—Ç–µ {chat_id}")

    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} –æ—Ç {username}: {data}")

            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            try:
                parsed_data = json.loads(data)
                content = parsed_data["content"]
            except (json.JSONDecodeError, KeyError) as e:
                await websocket.send_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                continue

            if not content.strip():
                await websocket.send_text("–û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            try:
                cursor.execute("""
                    INSERT INTO messages (chat_id, sender_id, content, timestamp)
                    VALUES (?, ?, ?, CURRENT_TIMESTAMP)
                """, (chat_id, user_id, content))
                conn.commit()
                message_id = cursor.lastrowid  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {{'chat_id': {chat_id}, 'content': '{content}'}}, ID: {message_id}")
            except sqlite3.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: {e}")
                await websocket.send_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            message = {
                "username": username,
                "data": {
                    "chat_id": chat_id,
                    "content": content,
                    "message_id": message_id  # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                },
                "timestamp": datetime.utcnow().isoformat()
            }

            # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
            await manager.broadcast(chat_id, message)

    except WebSocketDisconnect:
        logger.info(f"üî¥ {username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —á–∞—Ç–∞ {chat_id}")
        manager.disconnect(chat_id, websocket)
    finally:
        conn.close()